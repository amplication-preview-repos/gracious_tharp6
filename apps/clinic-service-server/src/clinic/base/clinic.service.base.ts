/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Clinic as PrismaClinic } from "@prisma/client";

export class ClinicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClinicCountArgs, "select">): Promise<number> {
    return this.prisma.clinic.count(args);
  }

  async clinics<T extends Prisma.ClinicFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClinicFindManyArgs>
  ): Promise<PrismaClinic[]> {
    return this.prisma.clinic.findMany<Prisma.ClinicFindManyArgs>(args);
  }
  async clinic<T extends Prisma.ClinicFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClinicFindUniqueArgs>
  ): Promise<PrismaClinic | null> {
    return this.prisma.clinic.findUnique(args);
  }
  async createClinic<T extends Prisma.ClinicCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClinicCreateArgs>
  ): Promise<PrismaClinic> {
    return this.prisma.clinic.create<T>(args);
  }
  async updateClinic<T extends Prisma.ClinicUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClinicUpdateArgs>
  ): Promise<PrismaClinic> {
    return this.prisma.clinic.update<T>(args);
  }
  async deleteClinic<T extends Prisma.ClinicDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClinicDeleteArgs>
  ): Promise<PrismaClinic> {
    return this.prisma.clinic.delete(args);
  }
}
